<%- include('./partials/header.ejs') %> <%- include('./partials/nav.ejs') %>

<div class="relative">
  <div class="absolute inset-0 bg-black opacity-60"></div>
  <img class="w-full h-48 object-cover" src="/dist/pensions.jpg">
  
  <div class="absolute inset-0 flex flex-col justify-center items-center text-white z-10">
      <h1 class="text-5xl font-semibold">
          Pensions
        </h1>

     
  </div>
</div>

      </div>


<div class="container px-4 lg:px-0 lg:w-2/3 pb-8 lg:pb-16">
      <div class="lg:grid grid-cols-3 gap-x-16 mt-8">
        <form name="pensions-form" onsubmit="return validateForm()" method="post" action="/pensions">
          <label>Current Age</label>
          <input value="<%= age %>" required type="number" title="Your current age" name="age" min="16" max="100" />

          <label class="mt-5">Retirement Age</label>
          <input value="<%= retirement_age %>""  required type="number" title="The age you plan to retire" name="retirement_age" min="30" max="100" />

          <label class="mt-5">Monthly Contribution</label>
          <input value="<%= monthly_contribution %>"  required type="number" title="How much money you plan to put into your pension fund per month (including money from your employer)" name="monthly_contribution" min="0" max="10000" />

          <label class="mt-5">Current Pension Savings</label>
          <input value="<%= current_pension_savings %>" required type="number" title="How much money you currently have in a pension fund" name="current_pension_savings" min="0" max="1000000" />

       

          <button
            type="submit"
            class="mt-5 bg-yellow-300 hover:bg-yellow-400 font-bold py-2 px-4 rounded w-full"
          >
            Submit
          </button>
        </form>

        <div class="col-span-2">
        
          <h2 class="lg:text-lg mt-4 mb-4">
            A pension is a tax-efficient way to save for your retirement. You can
            get tax relief on your contributions, and your pension pot grows
            largely free of tax. It's a good idea to start putting money into 
            a private pension plan as early as possible in order to maximise your savings.
          </h2>

          <h2 class="lg:text-lg mt-4 mb-4">
            The State Pension is a regular payment from the government most people
            can claim when they reach State Pension age. The amount you get depends on your National Insurance record.
          </h2>

          <h2 class="lg:text-lg mt-4 mb-4">
            The State Pension age is currently 66, but it's rising. It will increase to 67 between 2026 and 2028.
          </h2>

        </div>
      </div>

    <% if (graphData.length > 0) { %>
    <div class="mt-16">  
      <h2 class="lg:text-lg mt-4 mb-4">
        The graph below shows how regular monthly contributions to a private pension can help the 
        total value increase over time, and how higher annual growth rates have a greater effect 
        on increasing your pension fund. It is important to note that higher annual growth rates 
        are often associated with higher risk investments. Also note that this graph does not 
        account for factors such as inflation or other fees.
      </h2>
      <canvas id="chart1"></canvas>

      <h2 class="lg:text-lg mt-4 mb-4">
        The graphs below show how your pension fund is broken down. The first graph shows the 
        tax free lump sum you can take from your pension pot when you retire, which is 25% of your 
        private pension pot. The remaining pension pot is then used as an annual income, as shown in 
        the second graph. The second graph also shows how the state pension is added to your annual 
        income once you reach state pension age. 
      </h2>
      <div class="flex justify-between items-center flex-wrap flex-shrink-0 px-6">
        <span class="w-1/2"><canvas id="chart2"></canvas></span>
        <span class="w-1/2"><canvas id="chart3"></canvas></span>
      </div>
      <% } %>

      <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
      <script>
        function validateForm() {
          let age = document.forms["pensions-form"]["age"].value;
          let retirementAge = document.forms["pensions-form"]["retirement_age"].value;

          if (parseInt(retirementAge) <= parseInt(age)) {
            alert("Your retirement age must be greater than your current age.");
            return false;
            }
        }


        <% if (graphData.length > 0){ %>
            const colours = ['Crimson', 'RoyalBlue', 'LimeGreen', 'Yellow', 'HotPink', 'DarkOrange', 'Orchid', 'ForestGreen', 'Aqua', 'Peru']

            const ctx2 = document.getElementById('chart1');
            var graphData = <%- JSON.stringify(graphData) %>;

            new Chart(ctx2, {
            type: 'line',
            data: {
              datasets: [{
                <% for (const i in graphData) { %>
                  type: 'line',
                  label:
                  <% if (i == 0) { %> "5% Annual Growth Rate",
                  <% } else if (i == 1) { %> "3.5% Annual Growth Rate",
                  <% } else if (i == 2) { %> "2% Annual Growth Rate",
                  <% } %>
                  data: [
                    <% for (const k in graphData[i]) { %>
                      <%= graphData[i][k] %>,
                    <% } %>
                  ],
                  backgroundColor: colours[<%= i %>],
                  borderColor: colours[<%= i %>]
                  <% if (i < graphData.length-1) { %>
                      }, {
                  <% } %>
              <% } %>
              }],
              labels: [
                <% for (const i in graphData[0]) { %>
                    '<%= Number(i)+1 %>',
                <% } %>
              ]
            },
            options: {
              responsive: true,
              plugins: {
                  title: {
                    display: true,
                    text: "Private Pension Growth"
                  },
                },
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'Years',
                            font: {
                                size: 14
                            }
                        }
                    },
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Value (£)',
                            font: {
                                size: 14
                            }
                        }
                    }
                }
            }
            });

            const ctx3 = document.getElementById('chart2');

            new Chart(ctx3, {
              type: 'pie',
              data: {
                datasets: [
                  {
                    data: [<%= pieGraphLumpSum %>, <%= pieGraphPotAfterSum %> ],
                    backgroundColor: [colours[3], colours[0]]
                  }
                ],
                labels: ["Tax Free Lump Sum", "Remaining Pension Pot"]
              },
              options: {
                responsive: true,
                radius: "65%",
                plugins: {
                  title: {
                    display: true,
                    text: "Pension Pot Breakdown"
                  },
                }
              }
            });

            const ctx4 = document.getElementById('chart3');

            new Chart(ctx4, {
              type: 'bar',
              data: {
                datasets: [
                  {
                    data: [0, <%= barGraphStatePension %> ],
                    backgroundColor: colours[1],
                    label: "State Pension"
                  },
                  {
                    data: [ <%= barGraphPrivatePension %>, <%= barGraphPrivatePension %> ],
                    backgroundColor: colours[0],
                    label: "Private Pension"
                  }
                ],
                labels: ["Before State Pension Age (66)", "After State Pension Age (66)"]
              },
              options: {
                responsive: true,
                barPercentage: 0.1,
                plugins: {
                  title: {
                    display: true,
                    text: "Pension Annual Income Breakdown"
                  },
                },
                scales: {
                  x: {
                    stacked: true,
                  },
                  y: {
                    stacked: true,
                    title: {
                      display: true,
                      text: 'Annual Income from Pension (£)',
                      font: {
                          size: 14
                      }
                    } 
                  }
                }
              }
            });

        <% } %>
      </script>
    </div>
 

  <script>
    let isAsc = true;
    let lastAttr = "";

    function sortTable(attr) {
      var rows, swapping, i, x, y, shouldSwap;
      swapping = true;

      if (attr == lastAttr) {
        isAsc = !isAsc;
      } else {
        isAsc = true;
      }

      lastAttr = attr;

      if (document.getElementById("text_view").classList.contains("hidden")) {
        // Keep looping until no more row swaps have been made
        while (swapping) {
          swapping = false;
          rows = document.querySelectorAll("table tr:not(:first-child)");

          // Loop through all rows
          for (i = 0; i < rows.length - 1; i++) {
            shouldSwap = false;

            /* Get the two elements you want to compare,
          one from current row and one from the next: */

            switch (attr) {
              case "years":
                x = rows[i]
                  .getElementsByTagName("td")[0]
                  .innerHTML.replace(" years", "");
                y = rows[i + 1]
                  .getElementsByTagName("td")[0]
                  .innerHTML.replace(" years", "");
                break;
              case "monthly":
                x = rows[i]
                  .getElementsByTagName("td")[1]
                  .innerHTML.replace("£", "");
                y = rows[i + 1]
                  .getElementsByTagName("td")[1]
                  .innerHTML.replace("£", "");
                break;
              case "total":
                x = rows[i]
                  .getElementsByTagName("td")[2]
                  .innerHTML.replace("£", "");
                y = rows[i + 1]
                  .getElementsByTagName("td")[2]
                  .innerHTML.replace("£", "");
                break;
            }

            // Check if the two rows should switch place
            if (
              (isAsc && parseFloat(x) > parseFloat(y)) ||
              (!isAsc && parseFloat(x) < parseFloat(y))
            ) {
              // If so, mark as a switch and break the loop
              shouldSwap = true;
              break;
            }
          }
          if (shouldSwap) {
            /* If a switch has been marked, make the switch
          and mark that a switch has been done: */
            rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
            swapping = true;
          }
        }
      } else {
        // Keep looping until no more row swaps have been made
        while (swapping) {
          swapping = false;
          rows = document.querySelectorAll(".display-box");

          // Loop through all rows
          for (i = 0; i < rows.length - 1; i++) {
            shouldSwap = false;

            /* Get the two elements you want to compare,
          one from current row and one from the next: */
            x = rows[i].getElementsByTagName("p")[0];
            y = rows[i + 1].getElementsByTagName("p")[0];

            // Check if the two rows should switch place
            if (attr == "total") {
              if (
                (isAsc &&
                  parseFloat(x.dataset.total.replace(",", "")) >
                    parseFloat(y.dataset.total.replace(",", ""))) ||
                (!isAsc &&
                  parseFloat(x.dataset.total.replace(",", "")) <
                    parseFloat(y.dataset.total.replace(",", "")))
              ) {
                // If so, mark as a switch and break the loop
                shouldSwap = true;
                break;
              }
            } else if (
              (isAsc &&
                parseFloat(x.dataset[`${attr}`]) >
                  parseFloat(y.dataset[`${attr}`])) ||
              (!isAsc &&
                parseFloat(x.dataset[`${attr}`]) <
                  parseFloat(y.dataset[`${attr}`]))
            ) {
              // If so, mark as a switch and break the loop
              shouldSwap = true;
              break;
            }
          }
          if (shouldSwap) {
            /* If a switch has been marked, make the switch
          and mark that a switch has been done: */
            rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
            swapping = true;
          }
        }
      }
    }
  </script>

  <%- include('./partials/footer.ejs') %>

  <script>
    var tabs = Array.from(document.getElementsByClassName("tab"));
    const text_view = document.getElementById("text_view");
    const table_view = document.getElementById("table_view");

    tabs.forEach((tab) => {
      tab.addEventListener("click", function () {
        var view = this.value;
        tabs.forEach((tab_btn) => {
          tab_btn.classList.remove("selected");
        });

        if (view == "text") {
          text_view.classList.remove("hidden");
          table_view.classList.add("hidden");
          tab.classList.add("selected");
        } else {
          table_view.classList.remove("hidden");
          text_view.classList.add("hidden");
          tab.classList.add("selected");
        }
      });
    });

    const buttons = Array.from(document.querySelectorAll(".sort"));
    buttons.forEach((button) => {
      button.addEventListener("mouseenter", function () {
        button.children[0].classList.remove("hide");
      });

      button.addEventListener("mouseleave", function () {
        if (!button.children[0].classList.contains("selected")) {
          button.children[0].classList.add("hide");
        }
      });

      button.addEventListener("click", function () {
        if (button.children[0].classList.contains("selected")) {
          if (button.children[0].innerHTML == "arrow_drop_down") {
            button.children[0].innerHTML = "arrow_drop_up";
          } else {
            button.children[0].innerHTML = "arrow_drop_down";
          }
        } else {
          button.children[0].classList.add("selected");
        }
        buttons.forEach((btn) => {
          if (btn != button) {
            btn.children[0].classList.remove("selected");
            btn.children[0].classList.add("hide");
            btn.children[0].innerHTML = "arrow_drop_down";
          }
        });
      });
    });
  </script>
</div>
